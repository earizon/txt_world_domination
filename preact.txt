

  let vdom = {        ←  Virtual DOM:
    type: 'p',           Declarative description of desired tree-structure
    props: {             to be build/rendered after receiving inputs.
      class: 'big',  
      children:['text']  ← Any children Virt.DOM elements is passed through 
    }                      props.children (this 'children' props always exists)
  }                  
  BUILDING the Virual DOM Programatically:
│Vanilla JS              │JSX:               │htm:              │
│─────────────────────── │───────────────────│──────────────────│
│import {                │import {           │import {          │
│ createElement,         │ createElement,    │  createElement,  │
│ render }               │ render }          │  render }        │
│from 'preact';          │ from 'preact';    │ from 'preact';   │
│                        │                   │                  │
│const var1 = 'big'      │const var1 = 'big' │const var1 = 'big'│
│let vdom = createElement│let vdom =         │let vdom = html`  │
│ ('p',                  │   <p              │  <p              <- <p> could also be
│  { class: var1 } ,     │     class={var1}> │   class=${var1}> │  a custom react Component
│'text')                 │  text</p>;        │  text</p>`;      │
│                        │                   │                  │
│render(vdom,            │render(vdom,       │render(vdom,      │
│   document.body);      │   document.body); │   document.body);│


─── DEFINING A COMPONENT (Button01) ────────────────────────────────────

const onClicked = () => { ...  }     <- Standard JS function
function Button01(props) {           <- Define a custom function component  'Button01' *1
  return                               take props as input, return Virt.DOM tree as result.
   <button                              
      class="my-button"
      onClick={onClicked}>           <- attach click to JS func.
   >
     {props.prop01}                     *1 WARN: It must be 1st-letter-uppercase
   </button>                                  to distinguish from standard HTML in JSX
}
┌────────────────────────────────────┐ Alternative definition using JS class syntax sugar. 
│ import { Component } from 'preact';│ When defined through classes, any update to the compoent
│                                    │ in the Virt.DOM tree will reuse the same class instance,
│ class ListWithButton                 allowing to store data/state on it
│       extends Component {          │
│   state = {                        <- state. 
│     counter : 0       ,            │  
│     errorState : null ,            <- Error 'workflow': capture error *1
│                                    │  alt 1: -> log, continue
│                                    │  alt 2: -> save as state -> re-render
│     TODOs:[{id:0,txt:'...'}])      <- Example sub-state with a list of values
│   }                                │                             
│                                    │                             
│   onClicked = () => {              │    
│     this.setState(                 <- use inherited-from-Component setState to force redraw
│       { counter:this.counter+1 })  │  upon state change.
│   }                                │
│                                    │
│   componentDidCatch(error) {...}   <- error handling, alt 1: decide what to do with an error
│                                    │  (setState or ignore/log). If it doesn't call setState(), 
│                                    │  error will "bubble up" to parent Virt.Dom. in tree.
│   static                           │
│   getDerivedStateFromError(error) {<- error-handling, alt 2: Never ignore the error. Always
│     return { errorState: ... }     │  returns an 'update' object to be applied via setState()
│   }                                │  in order to render properly.
│                                    │
│   render(props) {                  <- render function will be called at render exec time.
│    if (this.state.error) {         <- if any error render error.
│      return ...{this.state.error}..│
│    }                               │
│                                    │
│    return                          │
│    ( TODOs.map(todo =>             │
│       <li key={todo.id}>           <- Key props: unique IDs providing hints to react when
│         {todo.txt}                 │  managing big list of elements.  WARN: DON'T use mutable 
│       </li> ) ) +                  │  index-like values as key 
│                                    │
│    ( <button                       <- NOTE: lower case for html component.
│       class="my-button"            │        Upper-case to reuse other Prect components.
│       onClick={onClicked}>         │ 
│    >                               │ 
│      {props.prop01}                <- prop01 (color, size, ...) is an inmutable property for 
│    </button> )                     │  this component defined when its included in the VDT.
│   }                                │
│   // ============================= │
│   // LIFE-CYCLE / SIDE-EFFECTS     <- async event arriving randomly/uncontrolled in a future)
│   // ============================= │  (vs props mapped statically to trees).
│   componentDidMount() {            <- run just after  comp. is 1st rendered
│     remoteApiFetch(...)            │
│     .then(response => {            │
│         this.setState(...)         │
│     })                             │
│   }                                │
│   componentWillMount() {...}       <- run just before comp. is 1st rendered
│                                    │
│   componentWillReceiveProps(){...} <- run before Comp. is re-rendered
│   componentDidUpdate () {...}      <- run after  Comp. is re-rendered
│ }                                  │
└────────────────────────────────────┘

┌── ListWithButton Ussage  ─────────────────┐
│ let vdom = createElement(Button01,        <- Alt 1. programatically
│           { prop01: "Go!" })              │
│ let vdom = <ListWithButton prop01="Go!" /><- Alt 2. JSX. 
│ render(vdom, document.body)               <- Trigger rendering execution.
└───────────────────────────────────────────┘

● WRAPPER (decorator) COMPONENT using props.children ─────────────────
  function Wrapper1(props) {         ← Ussage: 
     <table>                           <Wrapper1>... some complex html ...</Wrapper1> 
     <tr>                             
       <td>{props.children}</td>     ← KEY POINT: 'props.children' always exists 
     </tr>                             with correct children values
     </table>
  }

● ── Refs ───────────────────────────────────────────────────────────────────
  Used to store Browser's DOM-reatled information during rendering.
  (whose changes are NOT tracked by Preact once rendered). E.g. Ussae
  const ref2DOM = createRef()              // <- create new ref. (to Browser DOM)
  ...                                            plain { current: "ANY value"} JS object 
  render( <input ref={ref2DOM} />, ...)    // <- pass ref as prop in Virt. DOM
  ref2DOM.current                          // <- an HTML browser DOM <input> element
  ref2DOM.current.focus()                  // <- focus the input!

  BEST-PATTERN: scope refs to classes (vs global)

● ── CONTEXT ────────────────────────────────────────────────────────────────
  PROBLEM: Different Components at various locations within the tree need 
    to access common data. (authentication data, user profile info,
    caches, storage, etc.)
  SOLUTION: Use Preact Context 
    <Provider> sets the context's value within a subtree
    <Consumer> gets the context value set by the nearest parent Provider
  
     import { createContext } from 'preact'
     import { useContext } from 'preact/hooks'
  
     const UsernameCtx = createContext()     // step 1: create new ctx instance.
                                             // if a value is passed it becomes the  
     export default function App() {         // default for the context.
       return (
         <UsernameCtx.Provider value="Bob">  // step 2: set ctx value @ Comp.'App'
           <div> <p> <User /> </p> </div>
         </UsernameCtx.Provider>
       )
     }
     
     function User() {
       const value = useContext(UsernameCtx) // step 3: get ctx value @ Comp.'User'
       return <span>{value}</span>           // step 4: use it to render.
     }
  
  ● Realistic usage for Context:
    store application's Auth. state 
  
    import { createContext } from 'preact'
    import { useState, useMemo, useContext } from 'preact/hooks'
    
    const AuthContext = createContext()
    
    export default function App() {
      const [user, setUser] = useState(null)
    
      const auth = useMemo(() => {
        return { user, setUser }
      }, [user])
    
      return (
        <AuthContext.Provider value={auth}>
          <div class="app">
            {auth.user && <p>Welcome {auth.user.name}!</p>}
            <Login />
          </div>
        </AuthContext.Provider>
      )
    }
    
    function Login() {
      const { user, setUser } = useContext(AuthContext)
    
      if (user) return (
        <div class="logged-in">
          Logged in as {user.name}.
          <button onClick={() => setUser(null)}>
            Log Out
          </button>
        </div>
      )
    
      return (
        <div class="logged-out">
          <button onClick={() => setUser({ name: 'Bob' })}>
            Log In
          </button>
        </div>
      )
    }
  
    context providers can be nested to "override" their value
    within a Virtual DOM subtree. E.j:
    URL paths segment:
    /inbox         <- Create Route props={path:...} rendering the 
    /inbox/compose    V.D.-tree when current path matches path segment.
    /settings         Each matched Route overrides "current path"
    ...               context value within its subtree removing 
                      path-part already matched.
      
    import { createContext } from 'preact'
    import { useContext } from 'preact/hooks'
    
    const pathProvider = createContext(location.pathname)
    
    function Route(props) {
      const path      = useContext(pathProvider) // the current path
      const isMatch   = path.startsWith(props.path)
      const innerPath = path.substring (props.path.length)
      return isMatch && (
        <pathProvider.Provider value={innerPath}> <- Nested context
          {props.children}
        </pathProvider.Provider>
      )
    }
  
    export default function App() {
      return (
        <div class="app">
          <Route path="/inbox">   <- Now Inbox component doesn't need 
            <Inbox />             <- to know its own path
          </Route>
          <Route path="/settings">
            <Settings />
          </Route>
        </div>
      )
    }
    
    function Inbox() {
      return (
        <div class="inbox">   
          ...
          <Route path="/compose"> <- compose component doesn't need
            <Compose />           <- to know its own path
          </Route>
        </div>
      )
    }

